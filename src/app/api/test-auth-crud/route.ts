/**
 * Authenticated CRUD Operations Test API Route
 * Tests CRUD operations using service role (bypassing RLS for testing)
 */

import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/lib/supabase';
import { randomUUID } from 'crypto';

// Create a service role client for testing
const supabaseAdmin = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
  }
);

export async function GET() {
  try {
    console.log('Testing authenticated CRUD operations...');

    // Generate a test user ID
    const testUserId = randomUUID();

    // Test 1: Create a journal entry using service role
    const createData = {
      user_id: testUserId,
      title: 'Test Entry with Service Role',
      content:
        'This is a test journal entry created at ' + new Date().toISOString(),
    };

    const { data: createdEntry, error: createError } = await supabaseAdmin
      .from('journal_entries')
      .insert(createData)
      .select()
      .single();

    if (createError) {
      return NextResponse.json(
        {
          success: false,
          step: 'create',
          error: createError,
        },
        { status: 500 }
      );
    }

    // Test 2: Read the created entry
    const { data: readEntry, error: readError } = await supabaseAdmin
      .from('journal_entries')
      .select('*')
      .eq('id', createdEntry.id)
      .single();

    if (readError) {
      return NextResponse.json(
        {
          success: false,
          step: 'read',
          error: readError,
        },
        { status: 500 }
      );
    }

    // Test 3: Update the entry
    const { data: updatedEntry, error: updateError } = await supabaseAdmin
      .from('journal_entries')
      .update({
        title: 'Updated Test Entry',
        content: 'This entry has been updated at ' + new Date().toISOString(),
      })
      .eq('id', createdEntry.id)
      .select()
      .single();

    if (updateError) {
      return NextResponse.json(
        {
          success: false,
          step: 'update',
          error: updateError,
        },
        { status: 500 }
      );
    }

    // Test 4: Create AI analysis for the entry
    const analysisData = {
      journal_entry_id: createdEntry.id,
      summary: 'This is a test summary generated by AI',
      emotions: { joy: 0.7, neutral: 0.3 },
      suggestions: { categories: ['reflection', 'gratitude'] },
      model: 'test-model',
    };

    const { data: createdAnalysis, error: analysisError } = await supabaseAdmin
      .from('ai_analysis')
      .insert(analysisData)
      .select()
      .single();

    if (analysisError) {
      return NextResponse.json(
        {
          success: false,
          step: 'create_analysis',
          error: analysisError,
        },
        { status: 500 }
      );
    }

    // Test 5: Query the combined view
    const { data: combinedData, error: combinedError } = await supabaseAdmin
      .from('journal_entries_with_analysis')
      .select('*')
      .eq('id', createdEntry.id)
      .single();

    if (combinedError) {
      return NextResponse.json(
        {
          success: false,
          step: 'combined_view',
          error: combinedError,
        },
        { status: 500 }
      );
    }

    // Test 6: Test RLS by trying to access with regular client
    const { supabase } = await import('@/lib/supabase');
    const { data: rlsTest, error: rlsError } = await supabase
      .from('journal_entries')
      .select('*')
      .eq('id', createdEntry.id);

    // Test 7: Clean up - Delete the test data
    await supabaseAdmin
      .from('ai_analysis')
      .delete()
      .eq('id', createdAnalysis.id);
    await supabaseAdmin
      .from('journal_entries')
      .delete()
      .eq('id', createdEntry.id);

    return NextResponse.json({
      success: true,
      message: 'All authenticated CRUD operations completed successfully',
      timestamp: new Date().toISOString(),
      results: {
        created: createdEntry,
        read: readEntry,
        updated: updatedEntry,
        analysis: createdAnalysis,
        combined: combinedData,
      },
      rls_test: {
        accessible_without_auth: rlsTest?.length || 0,
        error: rlsError?.message || null,
        note: 'RLS should prevent access without proper authentication',
      },
      note: 'Test data has been cleaned up',
    });
  } catch (error) {
    console.error('Authenticated CRUD test error:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Authenticated CRUD test failed',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}
